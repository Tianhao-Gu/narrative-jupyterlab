#/usr/bin/env python
"""
Simple client for testing (or maybe sending from bash) to the
log proxy (over a socket)
"""
__author__ = 'Dan Gunter <dkgunter@lbl.gov>'
__date__ = '8/26/14'

# System imports
import argparse
import logging
import os
import signal
import sys
import time
# Local imports
from biokbase.narrative.common import kblogging
from biokbase.narrative.common import log_common

_log = logging.getLogger("kb-log-client")
_ = logging.StreamHandler()
_.setFormatter(logging.Formatter(
    "[%(levelname)s] %(asctime)s %(name)s: %(message)s"))
_log.addHandler(_)

def parse_args():
    p = argparse.ArgumentParser()
    p.add_argument("event", type=str, default="test",
                   help="Name of event (default=%(default)s")
    p.add_argument("message", type=str, default="", nargs="*",
                   help="Text and/or <key>=<value> pairs for the message")
    p.add_argument("-v", "--verbose", dest="vb", action="count",
                   default=0, help="Increase verbosity")
    args = p.parse_args()
    return args


def send_message(event, message):
    _log.info("Sending log message")
    kblog = kblogging.get_logger("test")
    kblog.info("{}{}{}".format(event, log_common.EVENT_MSG_SEP, message))

def main(args):
    level = (logging.WARN, logging.INFO, logging.DEBUG)[min(args.vb, 2)]
    _log.setLevel(level)
    _log.info("init.start")
    message = ' '.join(args.message)
    send_message(args.event, message)
    # Wait for message to get sent from buffer
    time.sleep(1)

    return 0

if __name__ == '__main__':
    sys.exit(main(parse_args()))
